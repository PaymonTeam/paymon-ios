//
//  BR_Wallet.h
//
//  Created by Aaron Voisine on 9/1/15.
//  Copyright (c) 2015 breadwallet LLC
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.

#ifndef BR_Wallet_h
#define BR_Wallet_h

#include "BR_Transaction.h"
#include "BR_Address.h"
#include "BR_BIP32Sequence.h"
#include "BR_Int.h"
#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifndef DEFAULT_FEE_PER_KB
#define DEFAULT_FEE_PER_KB ((5000ULL*1000 + 99)/100) // bitcoind 0.11 min relay fee on 100bytes
#define MIN_FEE_PER_KB     ((TX_FEE_PER_KB*1000 + 190)/191) // minimum relay fee on a 191byte tx
#define MAX_FEE_PER_KB     ((100100ULL*1000 + 190)/191) // slightly higher than a 1000bit fee on a 191byte tx
#endif

typedef struct {
    UInt256_t hash;
    uint32_t n;
} BR_UTXO;

inline static size_t BR_UTXOHash(const void *utxo)
{
    // (hash xor n)*FNV_PRIME
    return (size_t)((((const BR_UTXO *)utxo)->hash.u32[0] ^ ((const BR_UTXO *)utxo)->n)*0x01000193);
}

inline static int BR_UTXOEq(const void *utxo, const void *otherUtxo)
{
    return (utxo == otherUtxo || (UInt256Eq(((const BR_UTXO *)utxo)->hash, ((const BR_UTXO *)otherUtxo)->hash) &&
                                  ((const BR_UTXO *)utxo)->n == ((const BR_UTXO *)otherUtxo)->n));
}

typedef struct BR_WalletStruct BR_Wallet;

// allocates and populates a BR_Wallet struct that must be freed by calling BR_WalletFree()
BR_Wallet *BR_WalletNew(BR_Transaction *transactions[], size_t txCount, BR_MasterPubKey mpk);

// not thread-safe, set callbacks once after BR_WalletNew(), before calling other BR_Wallet functions
// info is a void pointer that will be passed along with each callback call
// void balanceChanged(void *, uint64_t) - called when the wallet balance changes
// void txAdded(void *, BR_Transaction *) - called when transaction is added to the wallet
// void txUpdated(void *, const UInt256[], size_t, uint32_t, uint32_t)
//   - called when the blockHeight or timestamp of previously added transactions are updated
// void txDeleted(void *, UInt256, int, int) - called when a previously added transaction is removed from the wallet
void BR_WalletSetCallbacks(BR_Wallet *wallet, void *info,
                          void (*balanceChanged)(void *info, uint64_t balance),
                          void (*txAdded)(void *info, BR_Transaction *tx),
                          void (*txUpdated)(void *info, const UInt256_t txHashes[], size_t txCount, uint32_t blockHeight,
                                            uint32_t timestamp),
                          void (*txDeleted)(void *info, UInt256_t txHash, int notifyUser, int recommendRescan));

// wallets are composed of chains of addresses
// each chain is traversed until a gap of a number of addresses is found that haven't been used in any transactions
// this function writes to addrs an array of <gapLimit> unused addresses following the last used address in the chain
// the internal chain is used for change addresses and the external chain for receive addresses
// addrs may be NULL to only generate addresses for BR_WalletContainsAddress()
// returns the number addresses written to addrs
size_t BR_WalletUnusedAddrs(BR_Wallet *wallet, BR_Address addrs[], uint32_t gapLimit, int internal);

// returns the first unused external address
BR_Address BR_WalletReceiveAddress(BR_Wallet *wallet);

// writes all addresses previously genereated with BR_WalletUnusedAddrs() to addrs
// returns the number addresses written, or total number available if addrs is NULL
size_t BR_WalletAllAddrs(BR_Wallet *wallet, BR_Address addrs[], size_t addrsCount);

// true if the address was previously generated by BR_WalletUnusedAddrs() (even if it's now used)
int BR_WalletContainsAddress(BR_Wallet *wallet, const char *addr);

// true if the address was previously used as an input or output in any wallet transaction
int BR_WalletAddressIsUsed(BR_Wallet *wallet, const char *addr);

// writes transactions registered in the wallet, sorted by date, oldest first, to the given transactions array
// returns the number of transactions written, or total number available if transactions is NULL
size_t BR_WalletTransactions(BR_Wallet *wallet, BR_Transaction *transactions[], size_t txCount);

// writes transactions registered in the wallet, and that were unconfirmed before blockHeight, to the transactions array
// returns the number of transactions written, or total number available if transactions is NULL
size_t BR_WalletTxUnconfirmedBefore(BR_Wallet *wallet, BR_Transaction *transactions[], size_t txCount,
                                   uint32_t blockHeight);

// current wallet balance, not including transactions known to be invalid
uint64_t BR_WalletBalance(BR_Wallet *wallet);

// total amount spent from the wallet (exluding change)
uint64_t BR_WalletTotalSent(BR_Wallet *wallet);

// total amount received by the wallet (exluding change)
uint64_t BR_WalletTotalReceived(BR_Wallet *wallet);

// writes unspent outputs to utxos and returns the number of outputs written, or number available if utxos is NULL
size_t BR_WalletUTXOs(BR_Wallet *wallet, BR_UTXO utxos[], size_t utxosCount);

// fee-per-kb of transaction size to use when creating a transaction
uint64_t BR_WalletFeePerKb(BR_Wallet *wallet);
void BR_WalletSetFeePerKb(BR_Wallet *wallet, uint64_t feePerKb);

// returns an unsigned transaction that sends the specified amount from the wallet to the given address
// result must be freed using BR_TransactionFree()
BR_Transaction *BR_WalletCreateTransaction(BR_Wallet *wallet, uint64_t amount, const char *addr);

// returns an unsigned transaction that satisifes the given transaction outputs
// result must be freed using BR_TransactionFree()
BR_Transaction *BR_WalletCreateTxForOutputs(BR_Wallet *wallet, const BR_TxOutput outputs[], size_t outCount);

// signs any inputs in tx that can be signed using private keys from the wallet
// forkId is 0 for bitcoin, 0x40 for b-cash
// seed is the master private key (wallet seed) corresponding to the master public key given when the wallet was created
// returns true if all inputs were signed, or false if there was an error or not all inputs were able to be signed
int BR_WalletSignTransaction(BR_Wallet *wallet, BR_Transaction *tx, int forkId, const void *seed, size_t seedLen);

// true if the given transaction is associated with the wallet (even if it hasn't been registered)
int BR_WalletContainsTransaction(BR_Wallet *wallet, const BR_Transaction *tx);

// adds a transaction to the wallet, or returns false if it isn't associated with the wallet
int BR_WalletRegisterTransaction(BR_Wallet *wallet, BR_Transaction *tx);

// removes a tx from the wallet and calls BR_TransactionFree() on it, along with any tx that depend on its outputs
void BR_WalletRemoveTransaction(BR_Wallet *wallet, UInt256_t txHash);

// returns the transaction with the given hash if it's been registered in the wallet
BR_Transaction *BR_WalletTransactionForHash(BR_Wallet *wallet, UInt256_t txHash);

// true if no previous wallet transaction spends any of the given transaction's inputs, and no inputs are invalid
int BR_WalletTransactionIsValid(BR_Wallet *wallet, const BR_Transaction *tx);

// true if transaction cannot be immediately spent (i.e. if it or an input tx can be replaced-by-fee)
int BR_WalletTransactionIsPending(BR_Wallet *wallet, const BR_Transaction *tx);

// true if tx is considered 0-conf safe (valid and not pending, timestamp is greater than 0, and no unverified inputs)
int BR_WalletTransactionIsVerified(BR_Wallet *wallet, const BR_Transaction *tx);

// set the block heights and timestamps for the given transactions
// use height TX_UNCONFIRMED and timestamp 0 to indicate a tx should remain marked as unverified (not 0-conf safe)
void BR_WalletUpdateTransactions(BR_Wallet *wallet, const UInt256_t txHashes[], size_t txCount, uint32_t blockHeight,
                                uint32_t timestamp);
    
// marks all transactions confirmed after blockHeight as unconfirmed (useful for chain re-orgs)
void BR_WalletSetTxUnconfirmedAfter(BR_Wallet *wallet, uint32_t blockHeight);

// returns the amount received by the wallet from the transaction (total outputs to change and/or receive addresses)
uint64_t BR_WalletAmountReceivedFromTx(BR_Wallet *wallet, const BR_Transaction *tx);

// returns the amount sent from the wallet by the trasaction (total wallet outputs consumed, change and fee included)
uint64_t BR_WalletAmountSentByTx(BR_Wallet *wallet, const BR_Transaction *tx);

// returns the fee for the given transaction if all its inputs are from wallet transactions, UINT64_MAX otherwise
uint64_t BR_WalletFeeForTx(BR_Wallet *wallet, const BR_Transaction *tx);

// historical wallet balance after the given transaction, or current balance if transaction is not registered in wallet
uint64_t BR_WalletBalanceAfterTx(BR_Wallet *wallet, const BR_Transaction *tx);

// fee that will be added for a transaction of the given size in bytes
uint64_t BR_WalletFeeForTxSize(BR_Wallet *wallet, size_t size);

// fee that will be added for a transaction of the given amount
uint64_t BR_WalletFeeForTxAmount(BR_Wallet *wallet, uint64_t amount);

// outputs below this amount are uneconomical due to fees (TX_MIN_OUTPUT_AMOUNT is the absolute minimum output amount)
uint64_t BR_WalletMinOutputAmount(BR_Wallet *wallet);

// maximum amount that can be sent from the wallet to a single address after fees
uint64_t BR_WalletMaxOutputAmount(BR_Wallet *wallet);

// frees memory allocated for wallet, and calls BR_TransactionFree() for all registered transactions
void BR_WalletFree(BR_Wallet *wallet);

// returns the given amount (in satoshis) in local currency units (i.e. pennies, pence)
// price is local currency units per bitcoin
int64_t BR_LocalAmount(int64_t amount, double price);

// returns the given local currency amount in satoshis
// price is local currency units (i.e. pennies, pence) per bitcoin
int64_t BR_BitcoinAmount(int64_t localAmount, double price);

#ifdef __cplusplus
}
#endif

#endif // BR_Wallet_h
